# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vald.v1.payload import payload_pb2 as vald_dot_v1_dot_payload_dot_payload__pb2


class MetaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Get = channel.unary_unary(
                '/meta.v1.Meta/Get',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Key.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Value.FromString,
                _registered_method=True)
        self.Set = channel.unary_unary(
                '/meta.v1.Meta/Set',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.KeyValue.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Empty.FromString,
                _registered_method=True)
        self.Delete = channel.unary_unary(
                '/meta.v1.Meta/Delete',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Key.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Empty.FromString,
                _registered_method=True)


class MetaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Set(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Key.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Value.SerializeToString,
            ),
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.KeyValue.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Empty.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Key.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'meta.v1.Meta', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('meta.v1.Meta', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Meta(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meta.v1.Meta/Get',
            vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Key.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Value.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meta.v1.Meta/Set',
            vald_dot_v1_dot_payload_dot_payload__pb2.Meta.KeyValue.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/meta.v1.Meta/Delete',
            vald_dot_v1_dot_payload_dot_payload__pb2.Meta.Key.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
